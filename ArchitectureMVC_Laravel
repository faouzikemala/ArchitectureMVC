### architecture MVC en utilisant PHP et le framework Laravel :

1. Modèle (Model) :

```php
// User.php (Modèle User)
namespace App\Models;

use Illuminate\Database\Eloquent\Model;

class User extends Model
{
    protected $fillable = ['name', 'email'];
}
```

2. Vue (View) :

```php
<!-- users.blade.php (Vue User) -->
<!DOCTYPE html>
<html>
<head>
    <title>Liste des utilisateurs</title>
</head>
<body>
    <h1>Liste des utilisateurs</h1>
    <table>
        <tr>
            <th>ID</th>
            <th>Nom</th>
            <th>Email</th>
        </tr>
        @foreach ($users as $user)
        <tr>
            <td>{{ $user->id }}</td>
            <td>{{ $user->name }}</td>
            <td>{{ $user->email }}</td>
        </tr>
        @endforeach
    </table>
</body>
</html>
```

3. Contrôleur (Controller) :

```php
// UserController.php (Contrôleur User)
namespace App\Http\Controllers;

use App\Models\User;
use Illuminate\Http\Request;

class UserController extends Controller
{
    public function index()
    {
        $users = User::all();
        return view('users', compact('users'));
    }
    
    // Autres méthodes pour gérer les actions liées aux utilisateurs
}
```

Dans cet exemple, nous utilisons le framework Laravel qui facilite la mise en œuvre de l'architecture MVC. Le modèle "User" étend la classe de modèle fournie par Laravel, et nous définissons les colonnes "name" et "email" comme attributs remplissables.

La vue "users.blade.php" utilise le moteur de templating Blade de Laravel pour afficher la liste des utilisateurs à partir des données fournies par le contrôleur.

Le contrôleur "UserController" utilise la méthode "index()" pour récupérer tous les utilisateurs à partir du modèle "User" et les passe à la vue "users.blade.php" en utilisant la fonction "view()" de Laravel.

Cet exemple utilise Laravel, mais l'architecture MVC peut être mise en œuvre dans d'autres frameworks et langages de programmation avec des variations syntaxiques. L'idée principale reste la séparation des responsabilités entre les modèles, les vues et les contrôleurs pour rendre le code plus organisé, maintenable et évolutif.
